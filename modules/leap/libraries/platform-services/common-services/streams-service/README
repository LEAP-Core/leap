Streams Service

This module wraps the Streams Virtual Device in Soft Connections. Connection 
Chains are used so that many stream writers can be efficiently connected
to the same device.

First, a stream ID and message IDs are defined using LEAP dictionaries:

def STREAMID.FETCH_INFO "Stream for info messages from Fetch.";
def STREAMS.FETCH_INFO.FETCH_PC "Fetched PC 0x%h for Epoch: 0x%h.\n";
def STREAMS.FETCH_INFO.NEW_EPOCH "End of Epoch 0x%h.\n";

Then a stream client is isntantiated using the Stream ID:

let fetchInfo <- mkStreamsClient(`STREAMID_FETCH_INFO);

Then rules may send messages. Note that the hardware always sends 2 payloads
but the SW is smart enough to ignore unused ones:

rule doFetch (True);

    if (sendingMessages)
        fetchInfo.send(`STREAMS_FETCH_INFO_FETCH_PC, curPC, curEpoch);
        
Note that at most 1 message may be sent per HW clock cycle per stream client.
