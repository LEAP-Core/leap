import os
import sys
import re
import string
import SCons.Script
from model import  *
from li_module import *
import pygraph
try:
    from pygraph.classes.digraph import digraph
except ImportError:
    # don't need to do anything
    print "\n"
    # print "Warning you should upgrade to pygraph 1.8"

def get_buildpath(moduleList, module):
  return moduleList.env['DEFS']['ROOT_DIR_HW'] + '/' + module.buildPath

def get_wrapper(module):
  return module.name + '_Wrapper.bsv'

def get_log(module):
  return module.name + '_Log.bsv'

def get_temppath(moduleList, module):
  env = moduleList.env
  MODULE_PATH = get_buildpath(moduleList, module)
  TMP_BSC_DIR = env['DEFS']['TMP_BSC_DIR']
  return MODULE_PATH + '/' + TMP_BSC_DIR + '/'

def get_logfile(moduleList,module):
  TEMP_PATH = get_temppath(moduleList,module)
  return TEMP_PATH + get_wrapper(module).replace('.bsv', '.log')

#this might be better implemented as a 'Node' in scons, but 
#I want to get something working before exploring that path
# This is going to recursively build all the bsvs
class BSV():

  def __init__(self, moduleList):

    TMP_BSC_DIR = moduleList.env['DEFS']['TMP_BSC_DIR']

    # Should we be building in events? 
    if (getEvents(moduleList) == 0):
       bsc_events_flag = ' -D HASIM_EVENTS_ENABLED=False '
    else:
       bsc_events_flag = ' -D HASIM_EVENTS_ENABLED=True '

    self.BSC_FLAGS = moduleList.getAWBParam('bsv_tool', 'BSC_FLAGS') + bsc_events_flag

    moduleList.env.VariantDir(TMP_BSC_DIR, '.', duplicate=0)
    moduleList.env['ENV']['BUILD_DIR'] = moduleList.env['DEFS']['BUILD_DIR']  # need to set the builddir for synplify

    # Walk synthesis boundaries in reverse topological order
    topo = moduleList.topologicalOrderSynth()
    topo.reverse()
    topo.pop() # get rid of top module. 
 
    ##
    ## Is this a normal build or a build in which only Bluespec dependence
    ## is computed?
    ##

    if not moduleList.isDependsBuild:
      ##
      ## Normal build.
      ##
      ## Invoke a separate instance of SCons to compute the Bluespec
      ## dependence before going any farther.  We do this because the
      ## standard trick of having the compiler emit .d files doesn't work
      ## for us.  We can't predict the names of all Bluespec source
      ## files that may be generated in the iface tree for dictionaries
      ## and RRR.  SCons requires that dependence be computed on its first
      ## pass.  If a dictionary changes and a new Bluespec file is produced
      ## this must be discoverable before the ParseDepends call in
      ## build_synth_boundary() below.
      ##
      self.isDependsBuild = False

      if not moduleList.env.GetOption('clean'):
        print 'Building depends-init...'
        # Convert command line ARGUMENTS dictionary to a string
        args = ' '.join(['%s=%s' % (k, v) for (k, v) in moduleList.arguments.items()])
        s = os.system('scons depends-init ' + args)
        if (s & 0xffff) != 0:
          print 'Aborting due to dependence errors'
          sys.exit(1)

      ##
      ## Now that the "depends-init" build is complete we can continue with
      ## accurate inter-Bluespec file dependence.
      ##
      for module in topo:
          self.build_synth_boundary(moduleList, module)
   
      boundary_logs = []
      for module in topo:
          boundary_logs.extend(module.moduleDependency['BSV_LOG'])

      def cut_tree_build(target, source, env):
              
              liGraph = LIGraph(parseLogfiles(boundary_logs))     
              tree_file = open(get_buildpath(moduleList, moduleList.topModule) + "/build_tree.bsv",'w')
              tree_file.write("//Generated by BSV.py\n")
              tree_file.write("`ifndef BUILD_TREE\n")
              tree_file.write("`define BUILD_TREE\n")
              tree_file.write('`include "asim/provides/smart_synth_boundaries.bsh"\n')
              tree_file.write('`include "asim/provides/soft_connections.bsh"\n')
              # include all the dependencies in the graph. 
              for module in liGraph.graph.nodes():
                  tree_file.write('import ' + module.name + '_Wrapper::*;\n')        
 


              tree_file.write('import Vector::*;\n')

              tree_file.write('module mkEmpty (Empty); endmodule\n')
              if (getBuildPipelineDebug(moduleList) != 0):
                  print "LIGraph: " + str(liGraph)
       
              module_names = [ "__TREE_MODULE__" + str(id) for id in range(len(boundary_logs) - 1)]
     
              # A recursive function for partitioning a latency
              # insensitive graph into a a tree of modules so as to
              # minimize the number of rules in the modules of the
              # tree.  This construction reduces the complexity of the
              # design as seen by the bluespec compiler.  The code
              # could be reorganized as two passes: the construction
              # of the tree representation and the generation of the
              # tree code.  
              #
              # Input: LIGraph representing the user program 
              # 
              # Output: LIModule repesenting the tree produced
              # by the function.  This tree may have unmatched
              # channels.
              def cutRecurse(subgraph):
                  # doesn't make sense to cut up a size-one LIM
                  # trivially return the base LI module to the caller
                  if (len(subgraph.graph.nodes()) == 1):
                      return subgraph.graph.nodes()[0]

                  # do a min cut on the graph
                  map = min_cut(subgraph.graph)

                  if (getBuildPipelineDebug(moduleList) != 0):
                      print "Cut map: " + str(map)
                  
                  ## Now that we've got a cut, Build new li graphs from the sub components of
                  ## original graph However, we must be careful
                  ## because some modules may not have internal
                  ## channels, only external channels.  Thus for each
                  ## module we add an optional, dummy edge to ensure
                  ## that the partitioned graphs are constructed
                  ## correctly

                  graph0Connections = []
                  graph1Connections = []

                  for connection in subgraph.getChannels() + subgraph.getChains():
                      connectionSet = graph0Connections
                      if (map[connection.module] == 1):
                          connectionSet = graph1Connections
                      connectionSet += [connection.copy()]
                    
                  graph0 = LIGraph(graph0Connections)        
                  graph1 = LIGraph(graph1Connections)        

                  #Pick a name for the local module
                  localModule = module_names.pop()

                  # in order to build an LI module for this node in the tree,
                  # we need to have the code for the subtrees 
                  # below the current node.  And so we recurse.  If only one 
                  # module remains in the cut graph, there is no need to recurse
                  # and we just use that module. 
                  submodule0 = graph0.modules.values()[0]
                  if (len(graph0.modules) > 1):
                      submodule0 = cutRecurse(graph0)

                  submodule1 = graph1.modules.values()[0] 
                  if (len(graph1.modules) > 1):
                      submodule1 = cutRecurse(graph1)

                  # we need to build a representation of the new liModule we are about to construct.
                  treeModule = LIModule("FixMe",localModule)
                  
                  # now we can write out our modules.
                  tree_file.write("\n\n(*synthesize*)\n") 

                  # In order to generate the module, we need a type, 
                  # but we can only get it after analyzing the module pair
                  # Thus we store the module body code for later consumption                  
                  module_body = ""


                  # Instantiate the submodules.
                  for name in [submodule0.name, submodule1.name]:
                      module_body += "    let " + name + "_inst <- mk_" +\
                                     name + "_Wrapper();\n"                
                      module_body += "    let " + name + " = tpl_1(" +\
                                     name + "_inst.services);\n"


                  # At this node in the tree, we can match channels from our two children.  
                  # This matching is what reduces the bluespec compiler complexity, since matched
                  # channels do not need to be propagated upward.

                  matched = {} # Use a hash to detect matching

                  # handle matching channels 
                  for channel in submodule0.channels:                     
                      for partnerChannel in submodule1.channels:
                          if (channel.matches(partnerChannel)):
                              if (getBuildPipelineDebug(moduleList) != 0):
                                  print "Found match with " + str(partnerChannel)
                              matched[channel.name] = channel
                          
                              if (channel.isSource()):
                                  module_body += "    connectOutToIn(" + channel.module_name + ".outgoing[" + str(channel.module_idx) + "], " +\
                                      partnerChannel.module_name + ".incoming[" + str(partnerChannel.module_idx) + "]);// " + channel.name + "\n"
                              else:                                 
                                  module_body += "    connectOutToIn(" + partnerChannel.module_name + ".outgoing[" + str(partnerChannel.module_idx) + "], " +\
                                      channel.module_name + ".incoming[" + str(channel.module_idx) + "]);// " + channel.name + "\n"                          
                                      
                  #handle matching chains
                  for chain in submodule0.chains:                    
                      for partnerChain in submodule1.chains:
                          if (chain.matches(partnerChain)):
                              if (getBuildPipelineDebug(moduleList) != 0):
                                  print "Found match with " + str(partnerChain)
                              matched[chain.name] = chain
                              chain.sinkPartnerChain = partnerChain
                              chain.sourcePartnerChain = chain
                              module_body += "    connectOutToIn(" + channel.module_name + ".chains[" + str(chain.module_idx) + "].outgoing, " +\
                                  partnerChain.module_name + ".chains[" + str(partnerChain.module_idx) + "].incoming);// " + chain.name + "\n"


                  # Stick the remaining connections of child modules
                  # into the interface of this new module.  Include
                  # any chains.  we need to check chains for a match
                  # so that we get the routing right.  if matched,
                  # ingress will be module0 and egress will be module1

                  incoming = 0
                  outgoing = 0
                  chains = 0
 
                  # We need to propagate any remaining unmatched channels and chains up the tree,
                  # To do this we populate the LI module representing this node with the unmatched 
                  # channels of the child node. 
                  if (getBuildPipelineDebug(moduleList) != 0):
                      for channel in submodule0.channels:
                          print "Channel in " + submodule0.name + " " + str(channel)
                      for channel in submodule1.channels:
                          print "Channel in " + submodule1.name + " " + str(channel)

                  for channel in submodule0.channels + submodule1.channels:
                      channelCopy = channel.copy()
                     
                      if (not channel.name in matched):
                          if (channel.isSource()):
                              module_body += "    outgoingVec[" + str(outgoing) +"] = " + channel.module_name +\
                                             ".outgoing[" + str(channel.module_idx) + "];// " + channel.name + "\n"     
                              channelCopy.module_idx = outgoing
                              outgoing = outgoing + 1
                          else:
                              module_body += "    incomingVec[" + str(incoming) +"] = " + channel.module_name +\
                                             ".incoming[" + str(channel.module_idx) + "];// " + channel.name + "\n"     
                              channelCopy.module_idx =  incoming
                              incoming = incoming + 1

                          # override the module_name with the local
                          # module so that our parent will refer to us
                          # correctly
                          channelCopy.module_name = localModule
                          treeModule.addChannel(channelCopy) 

                  # Chains are always propagated up, but they can also
                  # be matched. In this case, we must use a portion of
                  # each child module's chain.

                  for chain in submodule0.chains + submodule1.chains:                      
                      chainCopy = chain.copy()                        
                      if (not (chain.name in matched)):
                          # need to add both incoming and outgoing
                          module_body += "    chainsVec[" + str(chains) +"] = PHYSICAL_CHAIN{incoming: " +\
                                         chain.module_name + ".chains[" + str(chain.module_idx) +\
                                         "].incoming, outgoing: " + chain.module_name + ".chains[" +\
                                         str(chain.module_idx) + "].outgoing};// " + chain.name + "\n"     
                          chainCopy.module_idx =  chains
                          chainCopy.module_name = localModule
                          treeModule.addChain(chainCopy)
                          chains = chains + 1
                                  
                      else:   
                          # we see matched chains twice, but we should
                          # only emit code once.
                          if ((chain.module_name == submodule1.name)):
                              # need to get form a chain based on the
                              # combination of the two modules
                              chain0 = matched[chain.name]
                              module_body += "    chainsVec[" + str(chains) +"] = PHYSICAL_CHAIN{incoming: " +\
                                             chain0.module_name + ".chains[" + str(chain0.module_idx) +\
                                             "].incoming, outgoing: " + chain.module_name+ ".chains[" +\
                                             str(chain.module_idx) + "].outgoing};// " + chain.name + "\n"     
                              chainCopy.module_idx =  chains
                              chainCopy.module_name = localModule                              
                              treeModule.addChain(chainCopy) 
                              chains = chains + 1        

      
                  # now that we have processed the module body, let's
                  # lay down wrapping code.
                  tree_file.write("module mk_" + localModule + "_Wrapper")
                  moduleType = "SOFT_SERVICES_SYNTHESIS_BOUNDARY#(" + str(incoming) +\
                               ", " + str(outgoing) + ", 0, 0, " + str(chains) + ")"

                  subinterfaceType = "WITH_CONNECTIONS#(" + str(incoming) + ", " +\
                                     str(outgoing) + ", 0, 0, " + str(chains) + ")"
                  tree_file.write(" (" + moduleType +");\n")
                   
                  #declare interface vectors
                  tree_file.write("    Vector#(" + str(incoming) + ", PHYSICAL_CONNECTION_IN)  incomingVec = newVector();\n")
                  tree_file.write("    Vector#(" + str(outgoing) + ", PHYSICAL_CONNECTION_OUT) outgoingVec = newVector();\n")
                  tree_file.write("    Vector#(" + str(chains) + ", PHYSICAL_CHAIN) chainsVec = newVector();\n")
        
                  # lay down module body
                  tree_file.write(module_body)
                                  
                  # fill in external interface 
                  tree_file.write("   let e0 <- mkEmpty();\n");
                  tree_file.write("   let e1 <- mkEmpty();\n");
                  tree_file.write("   let e2 <- mkEmpty();\n");
                  tree_file.write("   let clk <- exposeCurrentClock();\n");
                  tree_file.write("   let rst <- exposeCurrentReset();\n");

                  tree_file.write("    " + subinterfaceType + " moduleIfc = interface WITH_CONNECTIONS;\n")
                  tree_file.write("        interface incoming = incomingVec;\n")
                  tree_file.write("        interface outgoing = outgoingVec;\n")
                  tree_file.write("        interface chains = chainsVec;\n")                                   
                  tree_file.write("        interface incomingMultis = replicate(PHYSICAL_CONNECTION_IN_MULTI{clock: clk, reset: rst});\n")
                  tree_file.write("        interface outgoingMultis = replicate(PHYSICAL_CONNECTION_OUT_MULTI{clock: clk, reset: rst});\n")
                  tree_file.write("    endinterface;\n")
                                               
                  tree_file.write("    interface services = tuple3(moduleIfc,e0,e1);\n")
                  tree_file.write("    interface device = e2;\n")
                  tree_file.write("endmodule\n")

                  if (getBuildPipelineDebug(moduleList) != 0):
                      for channel in treeModule.channels:
                          print "Channel in " + treeModule.name + " " + str(channel)

                  return treeModule

              # partition the top level LIM graph to produce a tree of latency 
              # insensitive modules
              top_module = cutRecurse(liGraph)            

              # In multifpga builds, we may have some leftover modules
              # due to the way that the LIM compiler currently
              # operates. We emit dummy modules here to make
              # downstream tools happy.  This can be removed once we
              # reorganize the multifpga compiler.

              for module in module_names:
                  tree_file.write("\n\n(*synthesize*)\n")
                  tree_file.write("module mk_" + module + "_Wrapper (Reg#(Bit#(1)));\n")
                  tree_file.write("    let m <- mkRegU();\n")
                  tree_file.write("    return m;\n")
                  tree_file.write("endmodule\n")

              # we need to create a top level wrapper module to
              # re-monadize the soft connections so that the platform
              # compiles correctly
              tree_file.write("\n\nmodule [Connected_Module] instantiateBuildTree();\n")
              tree_file.write("    let tree <- liftModule(mk_" + top_module.name + "_Wrapper());\n")
              tree_file.write("    let connections = tpl_1(tree.services);\n")

              # these strings should probably made functions in the
              # liChannel code
              for channel in top_module.channels:
                  ch_reg_stmt = 'registerRecv'
                  ch_type = 'LOGICAL_RECV_INFO'
                  ch_src = 'incoming'
                  if (channel.isSource()):
                      ch_reg_stmt = 'registerSend'
                      ch_type = 'LOGICAL_SEND_INFO'
                      ch_src = 'outgoing'

                  tree_file.write('    ' + ch_reg_stmt + '(' + ch_type + ' { logicalName: "' +\
                                  channel.name + '", logicalType: "' + channel.raw_type +\
                                  '", computePlatform: "' + channel.platform + '", optional: ' +\
                                  str(channel.optional) + ', ' + ch_src + ': connections.' + ch_src +'[' +\
                                  str(channel.module_idx) + '], bitWidth:' + str(channel.bitwidth) +\
                                  ', moduleName: "' + channel.module_name + '"});\n')   

              for chain in top_module.chains:
                  tree_file.write('    registerChain(LOGICAL_CHAIN_INFO { logicalName: "' +\
                                  chain.name + '", logicalType: "' + chain.raw_type +\
                                  '", computePlatform: "' + channel.platform +\
                                  '", incoming: connections.chains[' + str(chain.module_idx) +\
                                  '].incoming, outgoing: connections.chains[' + str(chain.module_idx) +\
                                  '].outgoing, bitWidth:' + str(chain.bitwidth) +\
                                  ', moduleNameIncoming: "' + chain.module_name +\
                                  '",  moduleNameOutgoing: "' + chain.module_name + '"});\n')   

              tree_file.write("endmodule\n")
              tree_file.write("`endif\n")
              tree_file.close()
              return None
        
      ## We are going to have a whole bunch of BA and V files coming.
      ## We don't yet know what they contain, but we do know that there
      ## will be |synth_modules| - 2 of them

      if (not 'GEN_VERILOGS' in moduleList.topModule.moduleDependency):
          moduleList.topModule.moduleDependency['GEN_VERILOGS'] = []
      if (not 'GEN_BAS' in moduleList.topModule.moduleDependency):
          moduleList.topModule.moduleDependency['GEN_BAS'] = []

      use_tree_build = moduleList.getAWBParam('wrapper_gen_tool', 'USE_BUILD_TREE')

      if use_tree_build:
          build_path = get_buildpath(moduleList, moduleList.topModule)
          temp_path = get_temppath(moduleList, moduleList.topModule)

          treeNodeV = []
          treeNodeBA = []
          treeNodeBSV = [ build_path + 'build_tree.bsv']

          for id in range(len(moduleList.synthBoundaries()) - 1):
              name = "mk___TREE_MODULE__" + str(id) + "_Wrapper"
              moduleList.topModule.moduleDependency['GEN_VERILOGS'] += [name + ".v"]  
              moduleList.topModule.moduleDependency['GEN_BAS'] += [name + ".ba"] 
              treeNodeV += [temp_path + name + ".v"]
              treeNodeBA += [temp_path + name + ".ba"]

      ## having described the new build tree dependencies we can build
      ## the top module
      self.build_synth_boundary(moduleList, moduleList.topModule)

      # the top level model wrapper build needs the generated BSV's to
      # exist or it will not compile Only add these dependencies if we
      # are actually using the build tree
      if use_tree_build:
          # This produces the treeNode BSV. It must wait for the
          # compilation of the log files, which it will read to form the
          # LIM graph
          tree_components = moduleList.env.Command(treeNodeBSV,
                                                   boundary_logs,
                                                   cut_tree_build)

          moduleList.env.Depends(moduleList.topModule.moduleDependency['BSV_BO'],\
                                 tree_components)
          moduleList.env.Depends(moduleList.topModule.moduleDependency['BSV_LOG'],\
                                 tree_components)

      ##
      ## Generate the global string table.  Bluespec-generated global
      ## strings are stored in files by the compiler.
      ##
      ## The global string file will be generated in the top-level
      ## .bsc directory and a link to it will be added to the
      ## top-level directory.
      ##
      all_str_src = []
      for module in topo + [moduleList.topModule]:
        all_str_src.extend(module.moduleDependency['STR'])
      bsc_str = moduleList.env.Command(TMP_BSC_DIR + '/' + moduleList.env['DEFS']['APM_NAME'] + '.str',
                                       all_str_src,
                                       [ 'cat $SOURCES > $TARGET' ])
      strDep = moduleList.env.Command(moduleList.env['DEFS']['APM_NAME'] + '.str',
                                   bsc_str,
                                   [ 'ln -fs ' + TMP_BSC_DIR + '/$TARGET $TARGET' ])
      moduleList.topDependency += [strDep]


      if moduleList.env.GetOption('clean'):
        print 'Cleaning depends-init...'
        s = os.system('scons --clean depends-init')

    else:
      ##
      ## Dependence build.  The target of this build is "depens-init".  No
      ## Bluespec modules will be compiled in this invocation of SCons.
      ## Only .depends-bsv files will be produced.
      ##
      self.isDependsBuild = True

      deps = []
      for module in topo + [moduleList.topModule]:
        deps += self.compute_dependence(moduleList, module)

      moduleList.env.Alias('depends-init', deps)


  ##
  ## compute_dependence --
  ##   Build rules for computing intra-Bluespec file dependence.
  ##
  def compute_dependence(self, moduleList, module):
    env = moduleList.env
    MODULE_PATH =  get_buildpath(moduleList, module) 
    TMP_BSC_DIR = env['DEFS']['TMP_BSC_DIR']

    ALL_DIRS_FROM_ROOT = env['DEFS']['ALL_HW_DIRS']
    ALL_BUILD_DIRS_FROM_ROOT = transform_string_list(ALL_DIRS_FROM_ROOT, ':', '', '/' + TMP_BSC_DIR)
    ALL_LIB_DIRS_FROM_ROOT = ALL_DIRS_FROM_ROOT + ':' + ALL_BUILD_DIRS_FROM_ROOT

    ROOT_DIR_HW_INC = env['DEFS']['ROOT_DIR_HW_INC']
 
    targets = [ moduleList.env['DEFS']['ROOT_DIR_HW'] + '/' + module.buildPath + '/' + get_wrapper(module) ]
    if (module.name != moduleList.topModule.name):
      targets.append(moduleList.env['DEFS']['ROOT_DIR_HW'] + '/' + module.buildPath + '/'+ get_log(module))

    # We must depend on all sythesis boundaries. They can be instantiated anywhere.
    surrogate_children = moduleList.synthBoundaries()
    SURROGATE_BSVS = ''
    for child in surrogate_children:
      # Make sure module doesn't self-depend
      if (child.name != module.name):
        SURROGATE_BSVS += moduleList.env['DEFS']['ROOT_DIR_HW'] + '/' + child.buildPath +'/' + child.name + '.bsv '

    if (SURROGATE_BSVS != ''):
      DERIVED = ' -derived "' + SURROGATE_BSVS + '"'
    else:
      DERIVED = ''

    depends_bsv = MODULE_PATH + '/.depends-bsv'
    moduleList.env.NoCache(depends_bsv)
    compile_deps = 'leap-bsc-mkdepend -ignore ' + MODULE_PATH + '/.ignore' + ' -bdir ' + TMP_BSC_DIR + DERIVED + ' -p +:' + ROOT_DIR_HW_INC + ':' + ROOT_DIR_HW_INC + '/awb/provides:' + ALL_LIB_DIRS_FROM_ROOT + ' ' + ' '.join(targets) + ' > ' + depends_bsv

    # Delete depends_bsv if it is empty under the assumption that something
    # went wrong when creating it.  An empty dependence file would never be
    # rebuilt without this.
    try:
      if (os.path.getsize(depends_bsv) == 0):
        os.unlink(depends_bsv)
    except:
      None

    dep = moduleList.env.Command(depends_bsv,
                                 targets +
                                 moduleList.topModule.moduleDependency['IFACE_HEADERS'],
                                 compile_deps)

    # Load an old .depends-bsv file if it exists.  The file describes
    # the previous dependence among Bluespec files, giving a clue of whether
    # anything changed.  The file describes dependence between derived objects
    # and sources.  Here, we need to know about all possible source changes.
    # Scan the file looking for source file names.
    if os.path.isfile(depends_bsv):
      df = open(depends_bsv, 'r')
      dep_lines = df.readlines()

      # Match .bsv and .bsh files
      bsv_file_pattern = re.compile('\S+.[bB][sS][vVhH]$')

      all_bsc_files = []
      for ln in dep_lines:
        all_bsc_files += [f for f in re.split('[:\s]+', ln) if (bsv_file_pattern.match(f))]

      # Sort dependence in case SCons cares
      for f in sorted(all_bsc_files):
        if os.path.exists(f):
          moduleList.env.Depends(dep, f)

      df.close()

    return dep


  ##
  ## build_synth_boundary --
  ##   Build rules for generating a single synthesis boundary.  This function
  ##   may only be run after inter-Bluespec file dependence has been computed
  ##   and written to dependence files.  This requirement is met by running
  ##   a separate instance of SCons first that uses compute_dependence() above.
  ##
  def build_synth_boundary(self, moduleList, module):
    if (getBuildPipelineDebug(moduleList) != 0):
      print "Working on " + module.name

    env = moduleList.env
    MODULE_PATH =  get_buildpath(moduleList, module)
    TMP_BSC_DIR = env['DEFS']['TMP_BSC_DIR']

    ALL_DIRS_FROM_ROOT = env['DEFS']['ALL_HW_DIRS']
    ALL_BUILD_DIRS_FROM_ROOT = transform_string_list(ALL_DIRS_FROM_ROOT, ':', '', '/' + TMP_BSC_DIR)
    ALL_LIB_DIRS_FROM_ROOT = ALL_DIRS_FROM_ROOT + ':' + ALL_BUILD_DIRS_FROM_ROOT

    ROOT_DIR_HW_INC = env['DEFS']['ROOT_DIR_HW_INC']

    BSVS = moduleList.getSynthBoundaryDependencies(module, 'GIVEN_BSVS')
    # each submodel will have a generated BSV
    GEN_BSVS = moduleList.getSynthBoundaryDependencies(module, 'GEN_BSVS')
    APM_FILE = env['DEFS']['APM_FILE']
    BSC =env['DEFS']['BSC']

    ##
    ## Load intra-Bluespec dependence already computed.  This information will
    ## ultimately drive the building of Bluespec modules.
    ##
    env.ParseDepends(MODULE_PATH + '/.depends-bsv',
                     must_exist = not moduleList.env.GetOption('clean'))

    if not os.path.isdir(TMP_BSC_DIR):
      os.mkdir(TMP_BSC_DIR)

    ##
    ## Cleaning?  There are a few somewhat unpredictable files generated by bsc
    ## depending on the source files.  Delete them here instead of parsing the
    ## source files and generating scons dependence rules.
    ##
    if env.GetOption('clean'):
      os.system('cd '+ MODULE_PATH + '/' + TMP_BSC_DIR + '; rm -f *.ba *.c *.h *.sched')


    ##
    ## Older versions of Bluespec generated a .bi along with every .bo.
    ## This is how scons learns about them.
    ##
    def emitter_bo(target, source, env):
      if (getBluespecVersion() < 26572):
        target.append(str(target[0]).replace('.bo', '.bi'))
      return target, source

    def compile_bo_bsc_base(target):
      bdir = os.path.dirname(str(target[0]))
      lib_dirs = self.__bsc_bdir_prune(env, MODULE_PATH + ':' + ALL_LIB_DIRS_FROM_ROOT, ':', bdir)
      return  BSC +" " +  self.BSC_FLAGS + ' -p +:' + \
           ROOT_DIR_HW_INC + ':' + ROOT_DIR_HW_INC + '/asim/provides:' + \
           lib_dirs + ':' + TMP_BSC_DIR + ' -bdir ' + bdir + \
           ' -vdir ' + bdir + ' -simdir ' + bdir + ' -info-dir ' + bdir + \
           ' -fdir ' + bdir

    def compile_bo(source, target, env, for_signature):
      cmd = ''
      if (str(source[0]) != get_buildpath(moduleList, moduleList.topModule) + '/' + moduleList.topModule.name + '.bsv'): 
        cmd = compile_bo_bsc_base(target) + ' -D CONNECTION_SIZES_KNOWN ' + str(source[0])
      return cmd

    ## Builder for running the compiler and generating a log file with the
    ## compiler's messages.  These messages are used to note dangling
    ## connections and to generate the global string table.
    ## Kill compilation as soon as all the log data is generated, since
    ## no binary is needed.
    def compile_log_only(source, target, env, for_signature):
      cmd = compile_bo_bsc_base(target) + ' -KILLexpanded ' + str(source[0]) + \
            ' 2>&1 | tee ' + str(target[0]) + ' ; test $${PIPESTATUS[0]} -eq 0'
      return cmd

    ## Builder for generating a binary and a log file.
    def compile_bo_log(source, target, env, for_signature):
      cmd = compile_bo_bsc_base(target) + ' -D CONNECTION_SIZES_KNOWN ' + str(source[0]) + \
            ' 2>&1 | tee ' + str(target[0]).replace('.bo', '.log') + ' ; test $${PIPESTATUS[0]} -eq 0'
      return cmd

    bsc = moduleList.env.Builder(generator = compile_bo, suffix = '.bo', src_suffix = '.bsv',
                                 emitter = emitter_bo)

    bsc_log = moduleList.env.Builder(generator = compile_bo_log, suffix = '.bo', src_suffix = '.bsv',
                                     emitter = emitter_bo)


    # This guy has to depend on children existing?
    # and requires a bash shell
    moduleList.env['SHELL'] = 'bash' # coerce commands to be spanwed under bash
    bsc_log_only = moduleList.env.Builder(generator = compile_log_only, suffix = '.log', src_suffix = '.bsv')
    
    env.Append(BUILDERS = {'BSC' : bsc, 'BSC_LOG' : bsc_log, 'BSC_LOG_ONLY' : bsc_log_only})


    moduleList.env.VariantDir(MODULE_PATH + '/' + TMP_BSC_DIR, '.', duplicate=0)

    bsc_builds = []
    for bsv in BSVS + GEN_BSVS:
      bsc_builds += env.BSC(MODULE_PATH + '/' + TMP_BSC_DIR + '/' + bsv.replace('.bsv', ''), MODULE_PATH + '/' + bsv)


    #This should not be a for loop.
    for bsv in [get_wrapper(module)]:
      ##
      ## First pass just generates a log file to figure out cross synthesis
      ## boundary soft connection array sizes.
      ##
      ## All but the top level build need the log build pass to compute
      ## the size of the external soft connection vector.  The top level has
      ## no exposed connections and can generate the log file, needed
      ## for global strings, during the final build.
      ##
      logfile = get_logfile(moduleList, module)
      module.moduleDependency['BSV_LOG'] += [logfile]
      if (module.name != moduleList.topModule.name):
        log = env.BSC_LOG_ONLY(logfile, MODULE_PATH + '/' + bsv.replace('Wrapper.bsv', 'Log'))

        ##
        ## Parse the log, generate a stub file
        ##
        stub_name = bsv.replace('.bsv', '_con_size.bsh')
        stub = env.Command(MODULE_PATH + '/' + stub_name, log, 'leap-connect --softservice --dynsize $SOURCE $TARGET')

      ##
      ## Now we are ready for the real build
      ##
      if (module.name != moduleList.topModule.name):
        wrapper_bo = env.BSC(MODULE_PATH + '/' + TMP_BSC_DIR + '/' + bsv.replace('.bsv', ''), MODULE_PATH + '/' + bsv)
        moduleList.env.Depends(wrapper_bo, stub)
      else:
        ## Top level build can generate the log in a single pass since no
        ## connections are exposed
        wrapper_bo = env.BSC_LOG(MODULE_PATH + '/' + TMP_BSC_DIR + '/' + bsv.replace('.bsv', ''),
                                 MODULE_PATH + '/' + bsv)
        ## SCons doesn't deal well with logfile as a 2nd target to BSC_LOG rule,
        ## failing to derive dependence correctly.
        module.moduleDependency['BSV_BO'] = [wrapper_bo]
        env.Command(logfile, wrapper_bo, '')
        env.Precious(logfile)

        ## In case Bluespec build is the end of the build pipeline.
        moduleList.topDependency += [logfile]
        
        ## The toplevel bo also depends on the on the synthesis of the build tree from log files.

      ##
      ## Meta-data written during compilation to separate files.
      ##
      glob_str = env.Command(MODULE_PATH + '/' + TMP_BSC_DIR + '/' + bsv.replace('.bsv', '.str'),
                             wrapper_bo,
                             '')
      env.Precious(glob_str)
      module.moduleDependency['STR'] += [glob_str]

      ## All but the top level build need the log build pass to compute
      ## the size of the external soft connection vector.  The top level has
      ## no exposed connections and needs no log build pass.
      ##
      if (module.name != moduleList.topModule.name):
        if (getBuildPipelineDebug(moduleList) != 0):
          print 'wrapper_bo: ' + str(wrapper_bo)
          print 'stub: ' + str(stub)

        synth_stub_path = moduleList.env['DEFS']['ROOT_DIR_HW'] + '/' + module.buildPath + '/'
        synth_stub = synth_stub_path + module.name +'_synth.bsv'
        env.Command(synth_stub, # target
                    [stub, wrapper_bo],
                    ['leap-connect --alternative_logfile ' + logfile  + ' --softservice ' + APM_FILE + ' $TARGET'])

      ##
      ## The mk_<wrapper>.v file is really built by the Wrapper() builder
      ## above.  We use NULL commands to convince SCons the file is generated.
      ## This seems easier than SCons SideEffect() calls, which don't clean
      ## targets.
      ##
      ## We also generate all this synth boundary's GEN_VS
      ##
      ext_gen_v = []
      for v in moduleList.getSynthBoundaryDependencies(module, 'GEN_VS'):
        ext_gen_v += [MODULE_PATH + '/' + TMP_BSC_DIR + '/' + v]

      ##
      ## Generated Verilog (indicated with %generated in an AWB file) will
      ## be created by the compilation of some Bluespec file.  We just don't
      ## know which one.  Claim that all generated Verilog files are produced
      ## by the module compilation, which is sufficient for SCons to compute
      ## dependence.
      ##
      for v in moduleList.getSynthBoundaryDependencies(module, 'GEN_VERILOGS'):
        ext_gen_v += [MODULE_PATH + '/' + TMP_BSC_DIR + '/' + v]

      # Add the dependence for all Verilog noted above
      bld_v = env.Command([MODULE_PATH + '/' + TMP_BSC_DIR + '/mk_' + bsv.replace('.bsv', '.v')] + ext_gen_v,
                          MODULE_PATH + '/' + TMP_BSC_DIR + '/' + bsv.replace('.bsv', '.bo'),
                          '')
      env.Precious(bld_v)

      if (moduleList.getAWBParam('bsv_tool', 'BUILD_VERILOG') == 1):
        module.moduleDependency['VERILOG'] += [bld_v] + [ext_gen_v]

      if (getBuildPipelineDebug(moduleList) != 0):
        print "Name: " + module.name

      # each synth boundary will produce a ba
      bld_ba = [env.Command([MODULE_PATH + '/' + TMP_BSC_DIR + '/mk_' + bsv.replace('.bsv', '.ba')],
                            MODULE_PATH + '/' + TMP_BSC_DIR + '/' + bsv.replace('.bsv', '.bo'),
                            '')]
      
      ##
      ## We also generate all this synth boundary's GEN_BAS. This is a
      ## little different because we must dependent on awb module bo rather
      ## than the synth boundary bo
      ##
      descendents = moduleList.getSynthBoundaryDescendents(module)
      for descendent in descendents:
        if (getBuildPipelineDebug(moduleList) != 0):
          print "BA: working on " + descendent.name

        gen_ba = moduleList.getDependencies(descendent, 'GEN_BAS')

        # Dress them with the correct directory. Really the ba's depend on
        # their specific bo.
        ext_gen_ba = []
        for ba in gen_ba:
          if (getBuildPipelineDebug(moduleList) != 0):
            print "BA: " + descendent.name + " generates " + MODULE_PATH + '/' + TMP_BSC_DIR + '/' + ba
          ext_gen_ba += [MODULE_PATH + '/' + TMP_BSC_DIR + '/' + ba]    
          
        ##
        ## Do the same for .ba
        ##
        bld_ba += [env.Command(ext_gen_ba,
                               MODULE_PATH + '/' + TMP_BSC_DIR + '/' + descendent.name + '.bo',
                               '')]


      module.moduleDependency['BA'] += bld_ba 
      env.Precious(bld_ba)

      ##
      ## Build the Xst black-box stub.
      ##
      bb = env.Command(MODULE_PATH + '/' + TMP_BSC_DIR + '/mk_' + bsv.replace('.bsv', '_stub.v'),
                       bld_v + bld_ba,
                       'leap-gen-black-box -nohash $SOURCE > $TARGET')

      # because I'm not sure that we guarantee the wrappers can only be imported
      # by parents, 
      moduleList.topModule.moduleDependency['VERILOG_STUB'] += [bb]

      return [bb] #XXX what does this do?



  ##
  ## As of Bluespec 2008.11.C the -bdir target is put at the head of the search path
  ## and the compiler complains about duplicate path entries.
  ##
  ## This code removes the local build target from the search path.
  ##
  def __bsc_bdir_prune(self, env, str_in, sep, match):
    t = clean_split(str_in, sep)

    # Make the list unique to avoid Bluespec complaints about duplicate paths.
    seen = set()
    t = [e for e in t if e not in seen and not seen.add(e)]

    if (getBluespecVersion() >= 15480):
      try:
        while 1:
          i = t.index(match)
          del t[i]
      except ValueError:
        pass
    return string.join(t, sep)
