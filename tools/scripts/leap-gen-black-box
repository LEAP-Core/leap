#!/usr/bin/env perl
# -*- perl -*-

##
## Copyright (C) 2009 Intel Corporation
##
## This program is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation; either version 2
## of the License, or (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
##

##
## Simple code for taking a Bluespec generated Verilog synthesis boundary
## wrapper and turning it into a black box for use in Xilinx xst.  This
## allows us to run each synthesis boundary separately through xst.
##

use Getopt::Long;

my $nohash;

sub Usage() {
    print STDERR "Usage:  leap-gen-black-fox <input verilog>\n";
    exit(1);
}

if (! GetOptions('nohash!' => \$nohash
                ))
{
    Usage();
}
Usage() if ($#ARGV < 0);



open(V, "< $ARGV[0]") or die("Failed to open input file $ARGV[0]");

my $found_module = 0;
my $port_decl_done = 0;
my $port_count = 0;

print "//\n";
print "// Black box stub generated by leap-gen-black-box.  The stub will be\n";
print "// used by xst for compiling each synthesis boundary separately.\n";
print "//\n\n";

while (<V>) {
    chomp;

    if (/^module /) {
        $found_module = 1;
    }

    if($found_module && !$port_decl_done) {
	# funny inout syntax
        if(/\s*\.[_a-zA-z0-9]+\([_a-zA-z0-9]+\),/) {
	    $port_count = $port_count + 1;
	} 
        elsif(/\s*[_a-zA-z0-9]+,/) {
	    $port_count = $port_count + 1;
	}
	elsif(/\); *$/) {
	    $port_count = $port_count + 1;
	    $port_decl_done = 1;
	}
    }

    if($port_decl_done) {
	if(/^\s*input\s*/ || /^\s*output\s*/ || /^\s*inout\s*/) {
	    $port_count = $port_count - 1;
	}
    }

    print $_ . " // $port_count \n" if($found_module);    
    last if ($port_decl_done && $port_count == 0 );
    
}

print "endmodule\n";

close(V);

if(! defined($nohash)) {
    print "\n";
    print "//\n";
    print "// Work around a SCons bug in which it looks only at the nearest child to decide\n";
    print "// whether to rebuild a parent.  Make sure the generated file changes if the\n";
    print "// base Verilog file changes.\n";
    print "//\n";
    
    my $md5 = `md5sum $ARGV[0]`;
    chomp($md5);
    print "// ${md5}\n";
}
