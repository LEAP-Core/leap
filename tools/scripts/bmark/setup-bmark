#!/usr/bin/env perl
# -*- perl -*-

##############################################################
#
# Benchmark setup for HAsim
#
# Usage: setup-bmark <bmark> <srcdir> <destdir>
#
# Setup benchmark to run in <destdir>
#
##############################################################

use strict;
use warnings;
use File::Basename;
use Getopt::Long;

sub Usage();
sub ErrorExit($);

#
# Turn on warnings
#
$^W = 1;

my $binary = undef;
my $compare = undef;
my $data = undef;
my $feeder = '';
my $group = undef;
my $isa = "unknown_ISA";
my $linkto = undef;
my $numContexts = 1;

#
# Find the root of the benchmarks directory tree.
#
my $benchmark_root = `awb-resolver --config=benchmarkdir`;
chomp($benchmark_root);
ErrorExit("Can't find benchmark root") if ($benchmark_root eq '');

#
# Parse the command line switches
#
if (! GetOptions('binary=s' => \$binary,
                 'compare=s' => \$compare,
                 'data=s' => \$data,
                 'feeder=s' => \$feeder,
                 'group=s' => \$group,
                 'isa=s' => \$isa,
                 'linkto=s' => \$linkto,
                 'contexts=i' => \$numContexts,
                )) {
    Usage();
}

if ($#ARGV != 2) {
    Usage();
}

my $bmark = $ARGV[0];
my $srcdir = $ARGV[1];
my $dstdir = $ARGV[2];

print "BMARK: $bmark\n";
print "SRC: $srcdir\n";
print "DST: $dstdir\n";

if (! defined($group)) {
    $group = $bmark;
}

chdir($dstdir) or ErrorExit("Failed to cd to $dstdir");

mkdir('hasim_debug') or ErrorExit("Failed to make 'hasim_debug' directory");

# Set up benchmark for non-null feeders
my $context = 0;
while ($context < $numContexts) {
    if ($feeder ne "none") {
        my $src_prog;

        mkdir("program.${context}") or ErrorExit("Failed to make program directory");
        chdir("program.${context}") or ErrorExit("Failed to cd to program directory");

        if (defined($binary)) {
            $src_prog = "${benchmark_root}/hasim/${isa}/${group}/${binary}";
        }
        elsif (-f "${benchmark_root}/hasim/${isa}/${group}/${bmark}.${isa}.bin") {
            $src_prog = "${benchmark_root}/hasim/${isa}/${group}/${bmark}.${isa}.bin";
        }
        elsif (-f "${benchmark_root}/hasim/${isa}/${group}/${bmark}.${isa}.vmh") {
            $src_prog = "${benchmark_root}/hasim/${isa}/${group}/${bmark}.${isa}.vmh";
        }
        else {
            print STDERR "Can't find binary in ${benchmark_root}/hasim/${isa}/${group}\n";
            exit(1);
        }

        my $dst_prog = basename($src_prog);

        unlink($dst_prog);
        symlink($src_prog, $dst_prog) or ErrorExit("Failed to symlink $dst_prog => $src_prog");

        # Copy input data files
        if (defined($data)) {
            if ($data =~ /\.tar\.gz$/) {
                system("tar xzf ${data}");
            }
            elsif ($data =~ /\.tar$/) {
                system("tar xf ${data}");
            }
        }

        # Link to files or directories
        if (defined($linkto)) {
            foreach my $tgt (split(':', $linkto)) {
                if ($tgt =~ /\/$/) {
                    # Trailing slash means link to all the files individually within
                    # a directory.
                    if (-d $tgt) {
                        opendir(DIR, $tgt) || die("Cannot open directory for --linkto $tgt\n");
                        my @tgt_objs = readdir(DIR);
                        closedir(DIR);
                        foreach my $t (@tgt_objs) {
                            if (! (($t eq '.') || ($t eq '..'))) {
                                symlink("${tgt}${t}", basename($t)) or die("Failed to link to ${tgt}${t}");
                            }
                        }
                    }
                }
                else {
                    # No trailing slash. Just link to a single object
                    symlink($tgt, basename($tgt)) or die("Failed to link to $tgt");
                }
            }
        }

        # Back to main workload directory
        chdir("..");
    }

    $context += 1;
}

# Store compare rules to config
open(ENV, '>>config/env.sh') or die("Failed to open config/env.sh");
print ENV "ISA=\"${isa}\"\n";
if ($numContexts != 0) {
    print ENV "workloadContexts=\"${numContexts}\"\n";
}
if (defined($compare)) {
    print ENV "compare=\"${compare}\"\n";
}
close(ENV);

# Set up m5 environment
if ($feeder eq 'm5') {
    system("(cd $srcdir; tar cf - ./m5_configs) | tar xf -");
}

system("cp -f ${srcdir}/run.bmark run");
chmod(0755, "run");

exit(0);



sub Usage() {
    print STDERR "Usage: setup-bmark [--binary <name>]\n";
    print STDERR "                   [--compare <compare commands>]\n";
    print STDERR "                   [--contexts <num workload contexts>]\n";
    print STDERR "                   [--data <tar file>]\n";
    print STDERR "                   [--group <name>]\n";
    print STDERR "                   [--isa <name>]\n";
    print STDERR "                   [--linkto <target0>:...:<targetN>]\n";
    print STDERR "                   <bmark> <srcdir> <dstdir>\n";
    exit(1);
}


sub ErrorExit($) {
    print STDERR @_ . "\n";
    exit(1);
}
